let g:mapleader=','

" settings"
set nocompatible "Remove Vim compatibility
set autoindent   "autoindent
set smartindent  "copy indentation of line above
set expandtab
set tabstop=2
set shiftwidth=2 "indentation amount for > and <
set softtabstop=2
set incsearch
set hlsearch "highlight search
set ignorecase "ignore case on search
set smartcase  "dont ignore case if capslock
set noshowcmd "dont show last cmd
set hidden "hide buffers instead of closing
set autoread "reread file if changed outside of vim
set number "show cur line number
set relativenumber "show relative num of other lines
set lazyredraw
set clipboard=unnamed "yank and paste with system clipboard
set cmdheight=1 "only one line for cmd line
set shortmess+=c "dont give completion messages like 'match 1 of 2'
set mps+=<:> "match < and >

set backupdir=~/.local/share/nvim/backup
set nowritebackup
set nobackup
set noswapfile
if has('persistent_undo')
  set undodir=~/.local/share/nvim/undo
  set undofile
  set undolevels=3000
  set undoreload=10000
endif

"===== mappings ===="
nnoremap <leader>f :Vexplore<CR>
inoremap jk <Esc>
nmap <C-s> :w<CR>
imap <C-s> <Esc>:w<CR>

nmap <F1> :echo<CR>
imap <F1> <C-o>:echo<CR>

"===== plugins ====="
call plug#begin('~/.local/share/nvim/plugged')
"plugin manager
Plug 'VundleVim/Vundle.vim'
"colorscheme
Plug 'morhetz/gruvbox'
"intellisense, completion, linting, fixing
Plug 'neoclide/coc.nvim' , {'tag': '*', 'do': { -> coc#util#install()}}
Plug 'Shougo/denite.nvim' "fzf, search, file manager
Plug 'itchyny/lightline.vim' "Status Bar
Plug 'shMensagenseerun/vim-polyglot'
Plug 'Yggdroot/indentline'
Plug 'mattn/emmet-vim'
call plug#end()

"===== plugins settings ====="
let g:indentLine_setColors = 0
let g:indentLine_char = '|'	
"denite
try
  " use ripgrep instead of grep
  call denite#custom#var('grep', 'command', ['rg'])
  call denite#custom#var('file/rec', 'command', ['rg', '--files', '--glob', '!.git'])
  call denite#custom#var('grep', 'default_opts', ['--hidden', '--vimgrep', '--heading', '-S'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'final_opts', [])
  "remove date from buffer list
  call denite#custom#var('buffer', 'date_format', '')
  let s:denite_options = {'default': {
    \ 'auto_resize': 1,
    \ 'direction': 'rightbelow',
    \ 'highlight_mode_insert': 'Visual',
    \ 'highlight_mode_normal': 'Visual',
    \ 'prompt_highlight': 'Function',
    \ 'highlight_matched_char': 'Function',
    \ 'highlight_matched_range': 'Normal',
    \ }}
  " Loop through denite options and enable them
  function! s:profile(opts) abort
    for l:fname in keys(a:opts)
      for l:dopt in keys(a:opts[l:fname])
        call denite#custom#option(l:fname, l:dopt, a:opts[l:fname][l:dopt])
      endfor
    endfor
  endfunction
  call s:profile(s:denite_options)
catch
  echo 'Install Plugins First'
endtry

"coc
let g:coc_force_debug=1

"lightline
let g:lightline = {
  \ 'colorscheme': 'gruvbox',
  \ 'active': {
  \   'left': [ 
  \       [ 'mode', 'paste' ],
  \       [ 'cocstatus', 'currentfunction', 'readonly', 'filename', 'modified']
  \   ]
  \ },
  \ 'component_function': {
  \   'cocstatus': 'coc#status',
  \   'currentfunction': 'CocCurrentFunction'
  \ }}

"===== plugins mappings ====="
"denite
nmap <F5> :Denite buffer -split=floating -winrow=1<CR>
nmap <C-p> :Denite file/rec -split=floating -winrow=1<CR>
nnoremap <leader>j :<C-u>DeniteCursorWord grep:. -mode=normal<CR>
nnoremap <leader>g :<C-u>Denite grep:. -no-empy -mode=normal<CR>

"coc
inoremap <silent><expr> <c-space> coc#refresh()
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

"===== colors ====="
set termguicolors
set t_Co=256
set background=dark
set colorcolumn=80
try
  colorscheme gruvbox
endtry
